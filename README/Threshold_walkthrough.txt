Step-by-Step Explanation

The script is designed to help distinguish between stationary worms and actual artifacts by leveraging several key techniques:

Techniques Used
Movement Analysis:
The script calculates the differences in positions (dX and dY) and the Euclidean distance (distance) between consecutive frames to analyze movement.

Optimal Threshold Determination:
The script uses Gaussian Kernel Density Estimation (KDE) to determine an optimal threshold for distinguishing between stationary and moving frames. This threshold is based on the density distribution of distances.

Stationary Ratio Calculation:
For each subject, the script calculates the ratio of frames where the distance is below the threshold (stationary_ratio). If a subject has a high stationary_ratio (e.g., more than 95%), it is considered predominantly stationary.

Exclusion of Predominantly Stationary Subjects:
Subjects with a high stationary_ratio are excluded from the final results. This helps to filter out artifacts or noise that were mistakenly identified as worms but do not exhibit significant movement.
Detailed Explanation of Distinguishing Mechanism

1. Movement Analysis:
Position Differences: The script calculates the change in position for each frame:
data['dX'] = data['X'].diff().fillna(0)
data['dY'] = data['Y'].diff().fillna(0)
data['distance'] = np.sqrt(data['dX']**2 + data['dY']**2)

Distance Calculation: This computes the Euclidean distance, which is a direct measure of movement between consecutive frames.

2. Optimal Threshold Determination:
KDE for Distance Distribution: The script uses KDE to estimate the probability density function of the distances:
distances = data['distance'].values
density = gaussian_kde(distances)
xs = np.linspace(0, np.max(distances), 1000)
density_values = density(xs)
Threshold Setting: The threshold is set where the density falls below 5% of the maximum density:
threshold = xs[np.argmax(density_values > density_values.max() * 0.05)]

3. Stationary Ratio Calculation:
Stationary Frames: Frames with distances below the threshold are identified:
stationary = data['distance'] < optimal_threshold
Stationary Ratio: The ratio of stationary frames to total frames is calculated:
stationary_ratio = stationary.mean()

4. Exclusion of Predominantly Stationary Subjects:
Subject Exclusion: Subjects with a stationary_ratio exceeding 95% are considered artifacts or noise and are excluded from further processing:
if stationary_ratio > 0.95:
    continue


Walkthrough

The script processes each subject's data to determine if it is predominantly stationary, thus distinguishing between actual worms and artifacts:

>> Load Folder: The user selects the main folder containing subfolders with tracking data.
>> Process Each Subfolder: The script iterates through each subfolder, reads the .txt file, and processes the data.
>> Calculate Movement: The script calculates position differences and distances between frames.
>> Determine Threshold: Using KDE, the script determines an optimal threshold for distinguishing stationary frames.
>> Calculate Stationary Ratio: The script calculates the ratio of stationary frames.
>> Exclude Stationary Subjects: If the stationary ratio exceeds 95%, the subject is skipped.
>> Save Filtered Data: The filtered data from non-stationary subjects is combined and saved to a new file.


Summary
The script is optimized to distinguish between stationary worms and artifacts by calculating movement, determining an optimal threshold for stationary frames, and excluding subjects that are predominantly stationary. This approach helps ensure that only moving subjects, which are more likely to be actual worms, are included in the final results.


Refining the Threshold

>>Evaluate the initial threshold: Check the filtered data for any remaining artefacts or missing worms.
>>Adjust the threshold incrementally: Increase or decrease the threshold value slightly and re-evaluate the results.
>>Repeat the process: Iterate the process of applying the threshold, visualizing the results, and adjusting the threshold until the filtered data is satisfactory. By following this procedure, you can empirically determine a suitable threshold for distinguishing between stationary artefacts and moving worms in your dataset.

